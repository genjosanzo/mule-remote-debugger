/**
 * Mule Development Kit
 * Copyright 2010-2011 (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.debugger;

import org.mule.api.annotations.Module;
import org.mule.api.annotations.lifecycle.Stop;
import org.mule.api.annotations.param.*;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Processor;
import org.mule.debugger.remote.RemoteDebuggerService;
import org.mule.debugger.server.DebuggerHandler;

import javax.annotation.PostConstruct;
import java.util.HashMap;

/**
 * Cloud Connector
 *
 * @author MuleSoft, Inc.
 */
@Module(name = "muledebugger", schemaVersion = "3.2.0")
public class MuleDebuggerConnector
{
    /**
     * Configurable
     */
    @Configurable
    @Default("6666")
    @Optional
    private int portNumber;

    private RemoteDebuggerService server;
    private DebuggerHandler handler;

    /**
     * The port number where the debugger server will run
     *
     * @param portNumber The port number . Default 6666
     */
    public void setPortNumber(int portNumber)
    {
        this.portNumber = portNumber;
    }


    @PostConstruct
    public void initialize()
    {
        this.handler = new DebuggerHandler();
        this.server = new RemoteDebuggerService(this.portNumber, handler);
        this.server.startService();
    }

    @Stop
    public void shutdown()
    {
        server.stopService();
    }


    /**
     * Debug the payload content
     * <p/>
     * {@sample.xml ../../../doc/MuleDebugger-connector.xml.sample muledebugger:my-processor}
     *
     * @param payload The Payload
     * @return The payload
     */
    @Processor
    public Object debug(@Payload Object payload)
    {

        if (handler.isRunning())
        {
            handler.debug(new MuleDebuggingMessage(payload, new HashMap<String, Object>()));
        }

        return payload;
    }
}
