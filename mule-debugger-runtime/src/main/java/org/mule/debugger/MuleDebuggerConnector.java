/**
 * Mule Development Kit
 * Copyright 2010-2011 (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.debugger;

import org.mule.api.MuleContext;
import org.mule.api.MuleMessage;
import org.mule.api.annotations.Module;
import org.mule.api.annotations.lifecycle.Stop;
import org.mule.api.annotations.param.*;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Processor;
import org.mule.api.context.notification.MessageProcessorNotificationListener;
import org.mule.api.expression.ExpressionManager;
import org.mule.context.notification.MessageProcessorNotification;
import org.mule.context.notification.NotificationException;
import org.mule.debugger.remote.RemoteDebuggerService;
import org.mule.debugger.server.DebuggerService;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

/**
 * Cloud Connector
 *
 * @author MuleSoft, Inc.
 */
@Module(name = "muledebugger", schemaVersion = "3.2.0")
public class MuleDebuggerConnector {
    /**
     * Configurable
     */
    @Configurable
    @Default("6666")
    @Optional
    private int portNumber;

    private RemoteDebuggerService server;
    private DebuggerService handler;
    @Inject
    private MuleContext context;

    @Inject
    private ExpressionManager expressionManager;

    /**
     * The port number where the debugger server will run
     *
     * @param portNumber The port number . Default 6666
     */
    public void setPortNumber(int portNumber) {
        this.portNumber = portNumber;
    }


    @PostConstruct
    public void initialize() {
        this.handler = new DebuggerService();
        this.server = new RemoteDebuggerService(this.portNumber, handler);
        this.server.startService();
        try {
            this.context.registerListener(new MessageProcessorNotificationListener<MessageProcessorNotification>() {
                public void onNotification(MessageProcessorNotification notification) {

                       notification.getSource().getMessage();
                }
            });
        } catch (NotificationException e) {
            e.printStackTrace();
        }

    }

    @Stop
    public void shutdown() {
        server.stopService();
    }


    /**
     * Debug the payload content
     * <p/>
     * {@sample.xml ../../../doc/MuleDebugger-connector.xml.sample muledebugger:debug}
     *
     * @param message   The mule message
     * @param condition The conditional expression
     * @return The payload
     */
    @Processor
    public Object debug(MuleMessage message, @Optional @Default("false") Boolean condition) {


        if (handler.isRunning()) {

            boolean debug = true;
            if (condition != null) {
                debug = condition;
            }
            if (debug) {
                handler.onBreakPoint(new MuleDebuggingContext(message, getExpressionManager(), Thread.currentThread().getContextClassLoader()));
            }
        }

        return message.getPayload();
    }


    public ExpressionManager getExpressionManager() {
        return expressionManager;
    }

    public void setExpressionManager(ExpressionManager expressionManager) {
        this.expressionManager = expressionManager;
    }
}
